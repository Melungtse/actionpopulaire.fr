# Generated by Django 2.2 on 2019-04-23 10:16

import django.contrib.postgres.indexes
import django.contrib.postgres.search
from django.db import migrations

add_event_search_trigger = """
CREATE TEXT SEARCH CONFIGURATION fr ( COPY = french );
ALTER TEXT SEARCH CONFIGURATION fr
  ALTER MAPPING FOR hword, hword_part, word
  WITH unaccent, french_stem;


CREATE FUNCTION get_event_tsvector(
    _id events_event.id%TYPE,
    name events_event.name%TYPE,
    description events_event.description %TYPE,
    report events_event.report_content%TYPE,
    location_name events_event.location_name%TYPE
    ) RETURNS tsvector AS $$
DECLARE
    group_name RECORD;
    search tsvector;
BEGIN

    search := '';
    FOR group_name IN
    SELECT grp.name
    FROM groups_supportgroup grp JOIN events_organizerconfig config ON grp.id = config.as_group_id
    WHERE config.event_id = _id LOOP
        search := search || setweight(to_tsvector('fr', coalesce(group_name.name, '')), 'B');
    END LOOP;
  RETURN
    search ||
    setweight(to_tsvector('fr', coalesce(name, '')), 'A') ||
    setweight(to_tsvector('fr', coalesce(description, '')), 'C') ||
    setweight(to_tsvector('fr', coalesce(report, '')), 'C') ||
    setweight(to_tsvector('fr', coalesce(location_name, '')), 'B')
    ;
END;
$$ LANGUAGE plpgsql;

CREATE FUNCTION update_event_search_field_from_id(event_id events_event.id%TYPE) RETURNS VOID AS $$
BEGIN
    UPDATE events_event SET search = get_event_tsvector(id, name, description, report_content, location_name) WHERE id = event_id;
END;
$$ LANGUAGE plpgsql;

CREATE FUNCTION process_update_event() RETURNS TRIGGER AS $$
DECLARE
    do_update bool default FALSE;
BEGIN

    IF TG_OP = 'INSERT' THEN
        NEW.search := get_event_tsvector(NEW.id, NEW.name, NEW.description, NEW.report_content, NEW.location_name);
        RETURN NEW;
    END IF;

    IF (NEW.name <> OLD.name) THEN do_update = TRUE;
    ELSIF (NEW.description <> OLD.description) THEN do_update = TRUE;
    ELSIF (NEW.report_content <> OLD.report_content) THEN do_update = TRUE;
    ELSIF (NEW.location_name <> OLD.location_name) THEN do_update = TRUE;
    END IF;

    IF do_update THEN
        NEW.search := get_event_tsvector(NEW.id, NEW.name, NEW.description, NEW.report_content, NEW.location_name);
    END IF;

    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE FUNCTION process_update_supportgroup() RETURNS TRIGGER AS $$
DECLARE
    og RECORD;
BEGIN
    -- 
    -- Se charge de mettre a jour le champ search des évènement lorsaue le nom d'un groupe est modifier
    -- ou lorsque le groupe est supprimer
    -- 
    IF (tg_op = 'UPDATE') AND OLD.name <> NEW.name THEN
        FOR og IN SELECT event_id FROM events_organizerconfig WHERE as_group_id = NEW.id LOOP
            PERFORM update_event_search_field_from_id(og.event_id);
        END LOOP;
    ELSIF (tg_op = 'DELETE') THEN
        FOR og IN SELECT event_id FROM events_organizerconfig WHERE as_group_id = OLD.id LOOP
            PERFORM update_event_search_field_from_id(og.event_id);
        END LOOP;
    END IF;
    RETURN NULL;
END;
$$ LANGUAGE plpgsql;


CREATE FUNCTION process_update_organizerconfig() RETURNS TRIGGER AS $$
BEGIN
    IF (tg_op = 'INSERT') OR (tg_op = 'UPDATE') THEN
        PERFORM update_event_search_field_from_id(NEW.event_id);
    ELSIF (tg_op = 'DELETE') THEN
        PERFORM update_event_search_field_from_id(OLD.event_id);
    END IF;
    RETURN NULL;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER update_event_search_field_when_modified
BEFORE UPDATE OR INSERT ON events_event
    FOR EACH ROW EXECUTE PROCEDURE process_update_event();

CREATE TRIGGER update_event_search_field_when_supportgroup_modified
AFTER UPDATE OR DELETE ON groups_supportgroup
    FOR EACH ROW EXECUTE PROCEDURE process_update_supportgroup();

CREATE TRIGGER update_event_search_field_when_organizerconfig_modified
AFTER INSERT OR UPDATE OR DELETE ON events_organizerconfig
    FOR EACH ROW EXECUTE PROCEDURE process_update_organizerconfig();

UPDATE events_event SET search = get_event_tsvector(id, name, description, report_content, location_name);
"""

remove_event_search_trigger = """
DROP TRIGGER update_event_search_field_when_modified ON events_event;
DROP FUNCTION process_update_event();
DROP FUNCTION get_event_tsvector(_id events_event.id%TYPE,
    name events_event.name%TYPE, description events_event.description %TYPE,
    report events_event.report_content%TYPE, location_name events_event.location_name%TYPE);
DROP FUNCTION update_event_search_field_from_id(event_id events_event.id%TYPE);

DROP TRIGGER update_event_search_field_when_supportgroup_modified ON groups_supportgroup;
DROP FUNCTION process_update_supportgroup();
DROP TRIGGER update_event_search_field_when_organizerconfig_modified ON events_organizerconfig;
DROP FUNCTION process_update_organizerconfig();
DROP TEXT SEARCH CONFIGURATION fr;
"""


class Migration(migrations.Migration):
    dependencies = [
        ("events", "0074_event_do_not_list"),
        ("people", "0021_full_text_search"),  # ajout de UnaccentExtension à postgres
    ]

    operations = [
        migrations.AddField(
            model_name="event",
            name="search",
            field=django.contrib.postgres.search.SearchVectorField(
                editable=False,
                null=True,
                verbose_name="Données de recherche sur les évènements",
            ),
        ),
        migrations.RunSQL(
            sql=add_event_search_trigger, reverse_sql=remove_event_search_trigger
        ),
        migrations.AddIndex(
            model_name="event",
            index=django.contrib.postgres.indexes.GinIndex(
                fields=["search"], name="search_event_index"
            ),
        ),
    ]
